{
  "contractName": "photoToken",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "photos",
      "outputs": [
        {
          "internalType": "string",
          "name": "photo_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "originality",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "photo_id",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "originality",
              "type": "bool"
            }
          ],
          "internalType": "struct photoToken.Photo",
          "name": "_photo",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"photo_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"originality\",\"type\":\"bool\"}],\"internalType\":\"struct photoToken.Photo\",\"name\":\"_photo\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"photos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"photo_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"originality\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"name()\":{\"details\":\"Gets the token name.\",\"returns\":{\"_0\":\"string representing the token name\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Gets the token symbol.\",\"returns\":{\"_0\":\"string representing the token symbol\"}},\"tokenByIndex(uint256)\":{\"details\":\"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the tokens list\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Gets the token ID at a given index of the tokens list of the requested owner.\",\"params\":{\"index\":\"uint256 representing the index to be accessed of the requested tokens list\",\"owner\":\"address owning the tokens list to be accessed\"},\"returns\":{\"_0\":\"uint256 token ID at the given index of the tokens list owned by the requested address\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"\\\" | \\\"token.uri/123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"123\\\" | \\\"token.uri/123\\\" | \\\"token.uri/\\\" | \\\"\\\" | \\\"token.uri/<tokenId>\\\" |=== Requirements: - `tokenId` must exist.\"},\"totalSupply()\":{\"details\":\"Gets the total amount of tokens stored by the contract.\",\"returns\":{\"_0\":\"uint256 representing the total amount of tokens\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/photoToken.sol\":\"photoToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/ERC721.sol\":{\"keccak256\":\"0x754cb1fb86eddfad7fc1ab12bb01f56f15211351b4f8626ace884c5744b801e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac6784f0a3115a1e81bfefe5c322ac086177b418dc9e18222c8fdb45a77093d9\",\"dweb:/ipfs/QmVhMBDrGbvSyGB91PoJdtkCcBZp338PZfn1PLAKGZtSyR\"]},\"/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/photoToken.sol\":{\"keccak256\":\"0x2a1258c4660939d724742c1d7bfeada2f1fbb3970a5c0b833eb59016cbeb339c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c0f15fa617eb26c555d874e08132f8ff8acaebc5ba9a661d87b40b007a4dafa\",\"dweb:/ipfs/Qmazm1q9qVCaokA4F3UcXKFWtrQVM9huUPTktSUksuXfsR\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f50686f746f0000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5049430000000000000000000000000000000000000000000000000000000000815250620000966301ffc9a760e01b6200011860201b60201c565b8160069080519060200190620000ae929190620001f0565b508060079080519060200190620000c7929190620001f0565b50620000e06380ac58cd60e01b6200011860201b60201c565b620000f8635b5e139f60e01b6200011860201b60201c565b6200011063780e9d6360e01b6200011860201b60201c565b505062000314565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000184576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017b90620002e1565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023357805160ff191683800117855562000264565b8280016001018555821562000264579182015b828111156200026357825182559160200191906001019062000246565b5b50905062000273919062000277565b5090565b6200029c91905b80821115620002985760008160009055506001016200027e565b5090565b90565b6000620002ae601c8362000303565b91507f4552433136353a20696e76616c696420696e74657266616365206964000000006000830152602082019050919050565b60006020820190508181036000830152620002fc816200029f565b9050919050565b600082825260208201905092915050565b61302f80620003246000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063af2a5d6f11610071578063af2a5d6f1461032e578063b88d4fde14610360578063c87b56dd1461037c578063e8cc1085146103ac578063e985e9c5146103c857610121565b80636352211e146102765780636c0360eb146102a657806370a08231146102c457806395d89b41146102f4578063a22cb4651461031257610121565b806318160ddd116100f457806318160ddd146101c057806323b872dd146101de5780632f745c59146101fa57806342842e0e1461022a5780634f6ccce71461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190612242565b6103f8565b60405161014d9190612b1d565b60405180910390f35b61015e61045f565b60405161016b9190612b38565b60405180910390f35b61018e600480360381019061018991906122d5565b610501565b60405161019b9190612ab6565b60405180910390f35b6101be60048036038101906101b99190612206565b610586565b005b6101c861069e565b6040516101d59190612d98565b60405180910390f35b6101f860048036038101906101f39190612100565b6106af565b005b610214600480360381019061020f9190612206565b61070f565b6040516102219190612d98565b60405180910390f35b610244600480360381019061023f9190612100565b61076a565b005b610260600480360381019061025b91906122d5565b61078a565b60405161026d9190612d98565b60405180910390f35b610290600480360381019061028b91906122d5565b6107ad565b60405161029d9190612ab6565b60405180910390f35b6102ae6107e4565b6040516102bb9190612b38565b60405180910390f35b6102de60048036038101906102d9919061209b565b610886565b6040516102eb9190612d98565b60405180910390f35b6102fc610945565b6040516103099190612b38565b60405180910390f35b61032c600480360381019061032791906121ca565b6109e7565b005b610348600480360381019061034391906122d5565b610b68565b60405161035793929190612b5a565b60405180910390f35b61037a6004803603810190610375919061214f565b610c44565b005b610396600480360381019061039191906122d5565b610ca6565b6040516103a39190612b38565b60405180910390f35b6103c660048036038101906103c19190612294565b610e31565b005b6103e260048036038101906103dd91906120c4565b610f72565b6040516103ef9190612b1d565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f75780601f106104cc576101008083540402835291602001916104f7565b820191906000526020600020905b8154815290600101906020018083116104da57829003601f168201915b5050505050905090565b600061050c82611006565b61054b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054290612cf8565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610591826107ad565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f990612d58565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610621611023565b73ffffffffffffffffffffffffffffffffffffffff161480610650575061064f8161064a611023565b610f72565b5b61068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068690612c78565b60405180910390fd5b610699838361102b565b505050565b60006106aa60026110e4565b905090565b6106c06106ba611023565b826110f9565b6106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690612d78565b60405180910390fd5b61070a8383836111d7565b505050565b600061076282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206113ee90919063ffffffff16565b905092915050565b61078583838360405180602001604052806000815250610c44565b505050565b6000806107a183600261140890919063ffffffff16565b50905080915050919050565b60006107dd82604051806060016040528060298152602001612fd16029913960026114379092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561087c5780601f106108515761010080835404028352916020019161087c565b820191906000526020600020905b81548152906001019060200180831161085f57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee90612c98565b60405180910390fd5b61093e600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611456565b9050919050565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109dd5780601f106109b2576101008083540402835291602001916109dd565b820191906000526020600020905b8154815290600101906020018083116109c057829003601f168201915b5050505050905090565b6109ef611023565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5490612c38565b60405180910390fd5b8060056000610a6a611023565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610b17611023565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610b5c9190612b1d565b60405180910390a35050565b600a8181548110610b7557fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16905083565b610c55610c4f611023565b836110f9565b610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90612d78565b60405180910390fd5b610ca08484848461146b565b50505050565b6060610cb182611006565b610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790612d38565b60405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b50505050509050600060098054600181600116156101000203166002900490501415610dc85780915050610e2c565b600081511115610dfd57600981604051602001610de6929190612a92565b604051602081830303815290604052915050610e2c565b6009610e08846114c7565b604051602001610e19929190612a92565b6040516020818303038152906040529150505b919050565b60001515600b8260000151604051610e499190612a7b565b908152602001604051809103902060009054906101000a900460ff16151514610ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9e90612bb8565b60405180910390fd5b600a8190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019080519060200190610eef929190611e6d565b506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550505060006001600a805490500390506001600b8360000151604051610f3f9190612a7b565b908152602001604051809103902060006101000a81548160ff021916908315150217905550610f6e338261160e565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061101c82600261179c90919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661109e836107ad565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110f2826000016117b6565b9050919050565b600061110482611006565b611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90612c58565b60405180910390fd5b600061114e836107ad565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111bd57508373ffffffffffffffffffffffffffffffffffffffff166111a584610501565b73ffffffffffffffffffffffffffffffffffffffff16145b806111ce57506111cd8185610f72565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166111f7826107ad565b73ffffffffffffffffffffffffffffffffffffffff161461124d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124490612d18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b490612c18565b60405180910390fd5b6112c88383836117c7565b6112d360008261102b565b61132481600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206117cc90919063ffffffff16565b5061137681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206117e690919063ffffffff16565b5061138d818360026118009092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006113fd8360000183611835565b60001c905092915050565b60008060008061141b86600001866118a2565b915091508160001c8160001c8090509350935050509250929050565b600061144a846000018460001b84611925565b60001c90509392505050565b6000611464826000016119b6565b9050919050565b6114768484846111d7565b611482848484846119c7565b6114c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b890612bd8565b60405180910390fd5b50505050565b6060600082141561150f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611609565b600082905060005b60008214611539578080600101915050600a828161153157fe5b049150611517565b60608167ffffffffffffffff8111801561155257600080fd5b506040519080825280601f01601f1916602001820160405280156115855781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461160157600a84816115a657fe5b0660300160f81b828280600190039350815181106115c057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a84816115f957fe5b049350611594565b819450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590612cd8565b60405180910390fd5b61168781611006565b156116c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116be90612bf8565b60405180910390fd5b6116d3600083836117c7565b61172481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206117e690919063ffffffff16565b5061173b818360026118009092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006117ae836000018360001b611ba8565b905092915050565b600081600001805490509050919050565b505050565b60006117de836000018360001b611bcb565b905092915050565b60006117f8836000018360001b611cb3565b905092915050565b600061182c846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b611d23565b90509392505050565b600081836000018054905011611880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187790612b98565b60405180910390fd5b82600001828154811061188f57fe5b9060005260206000200154905092915050565b600080828460000180549050116118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e590612cb8565b60405180910390fd5b60008460000184815481106118ff57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e9190612b38565b60405180910390fd5b5084600001600182038154811061199a57fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006119e88473ffffffffffffffffffffffffffffffffffffffff16611dff565b6119f55760019050611ba0565b600060608573ffffffffffffffffffffffffffffffffffffffff1663150b7a0260e01b611a20611023565b898888604051602401611a369493929190612ad1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611aa09190612a64565b6000604051808303816000865af19150503d8060008114611add576040519150601f19603f3d011682016040523d82523d6000602084013e611ae2565b606091505b509150915081611b3a57600081511115611aff5780518082602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3190612bd8565b60405180910390fd5b600081806020019051810190611b50919061226b565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161493505050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114611ca75760006001820390506000600186600001805490500390506000866000018281548110611c1657fe5b9060005260206000200154905080876000018481548110611c3357fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480611c6b57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611cad565b60009150505b92915050565b6000611cbf8383611e4a565b611d18578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611d1d565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415611dca57846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050611df8565b82856000016001830381548110611ddd57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f9150808214158015611e4157506000801b8214155b92505050919050565b600080836001016000848152602001908152602001600020541415905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611eae57805160ff1916838001178555611edc565b82800160010185558215611edc579182015b82811115611edb578251825591602001919060010190611ec0565b5b509050611ee99190611eed565b5090565b611f0f91905b80821115611f0b576000816000905550600101611ef3565b5090565b90565b600081359050611f2181612f74565b92915050565b600081359050611f3681612f8b565b92915050565b600081359050611f4b81612fa2565b92915050565b600081519050611f6081612fa2565b92915050565b600082601f830112611f7757600080fd5b8135611f8a611f8582612de0565b612db3565b91508082526020830160208301858383011115611fa657600080fd5b611fb1838284612f21565b50505092915050565b600082601f830112611fcb57600080fd5b8135611fde611fd982612e0c565b612db3565b91508082526020830160208301858383011115611ffa57600080fd5b612005838284612f21565b50505092915050565b60006060828403121561202057600080fd5b61202a6060612db3565b9050600082013567ffffffffffffffff81111561204657600080fd5b61205284828501611fba565b600083015250602061206684828501612086565b602083015250604061207a84828501611f27565b60408301525092915050565b60008135905061209581612fb9565b92915050565b6000602082840312156120ad57600080fd5b60006120bb84828501611f12565b91505092915050565b600080604083850312156120d757600080fd5b60006120e585828601611f12565b92505060206120f685828601611f12565b9150509250929050565b60008060006060848603121561211557600080fd5b600061212386828701611f12565b935050602061213486828701611f12565b925050604061214586828701612086565b9150509250925092565b6000806000806080858703121561216557600080fd5b600061217387828801611f12565b945050602061218487828801611f12565b935050604061219587828801612086565b925050606085013567ffffffffffffffff8111156121b257600080fd5b6121be87828801611f66565b91505092959194509250565b600080604083850312156121dd57600080fd5b60006121eb85828601611f12565b92505060206121fc85828601611f27565b9150509250929050565b6000806040838503121561221957600080fd5b600061222785828601611f12565b925050602061223885828601612086565b9150509250929050565b60006020828403121561225457600080fd5b600061226284828501611f3c565b91505092915050565b60006020828403121561227d57600080fd5b600061228b84828501611f51565b91505092915050565b6000602082840312156122a657600080fd5b600082013567ffffffffffffffff8111156122c057600080fd5b6122cc8482850161200e565b91505092915050565b6000602082840312156122e757600080fd5b60006122f584828501612086565b91505092915050565b61230781612ead565b82525050565b61231681612e9b565b82525050565b61232581612ebf565b82525050565b600061233682612e4d565b6123408185612e63565b9350612350818560208601612f30565b61235981612f63565b840191505092915050565b600061236f82612e4d565b6123798185612e74565b9350612389818560208601612f30565b80840191505092915050565b60006123a082612e58565b6123aa8185612e7f565b93506123ba818560208601612f30565b6123c381612f63565b840191505092915050565b60006123d982612e58565b6123e38185612e90565b93506123f3818560208601612f30565b80840191505092915050565b60008154600181166000811461241c576001811461244157612485565b607f600283041661242d8187612e90565b955060ff1983168652808601935050612485565b6002820461244f8187612e90565b955061245a85612e38565b60005b8281101561247c5781548189015260018201915060208101905061245d565b82880195505050505b505092915050565b600061249a602283612e7f565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612500601783612e7f565b91507f70686f746f5f696420616c7265616479206578697374730000000000000000006000830152602082019050919050565b6000612540603283612e7f565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006125a6601c83612e7f565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006125e6602483612e7f565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061264c601983612e7f565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061268c602c83612e7f565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006126f2603883612e7f565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000612758602a83612e7f565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006127be602283612e7f565b91507f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612824602083612e7f565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612864602c83612e7f565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006128ca602983612e7f565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612930602f83612e7f565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000612996602183612e7f565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129fc603183612e7f565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b612a5e81612f17565b82525050565b6000612a708284612364565b915081905092915050565b6000612a8782846123ce565b915081905092915050565b6000612a9e82856123ff565b9150612aaa82846123ce565b91508190509392505050565b6000602082019050612acb600083018461230d565b92915050565b6000608082019050612ae660008301876122fe565b612af3602083018661230d565b612b006040830185612a55565b8181036060830152612b12818461232b565b905095945050505050565b6000602082019050612b32600083018461231c565b92915050565b60006020820190508181036000830152612b528184612395565b905092915050565b60006060820190508181036000830152612b748186612395565b9050612b836020830185612a55565b612b90604083018461231c565b949350505050565b60006020820190508181036000830152612bb18161248d565b9050919050565b60006020820190508181036000830152612bd1816124f3565b9050919050565b60006020820190508181036000830152612bf181612533565b9050919050565b60006020820190508181036000830152612c1181612599565b9050919050565b60006020820190508181036000830152612c31816125d9565b9050919050565b60006020820190508181036000830152612c518161263f565b9050919050565b60006020820190508181036000830152612c718161267f565b9050919050565b60006020820190508181036000830152612c91816126e5565b9050919050565b60006020820190508181036000830152612cb18161274b565b9050919050565b60006020820190508181036000830152612cd1816127b1565b9050919050565b60006020820190508181036000830152612cf181612817565b9050919050565b60006020820190508181036000830152612d1181612857565b9050919050565b60006020820190508181036000830152612d31816128bd565b9050919050565b60006020820190508181036000830152612d5181612923565b9050919050565b60006020820190508181036000830152612d7181612989565b9050919050565b60006020820190508181036000830152612d91816129ef565b9050919050565b6000602082019050612dad6000830184612a55565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612dd657600080fd5b8060405250919050565b600067ffffffffffffffff821115612df757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612e2357600080fd5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612ea682612ef7565b9050919050565b6000612eb882612ef7565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f4e578082015181840152602081019050612f33565b83811115612f5d576000848401525b50505050565b6000601f19601f8301169050919050565b612f7d81612e9b565b8114612f8857600080fd5b50565b612f9481612ebf565b8114612f9f57600080fd5b50565b612fab81612ecb565b8114612fb657600080fd5b50565b612fc281612f17565b8114612fcd57600080fd5b5056fe4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220d20de6bdddcb796c194ad8b041661006f4c60214dde5f5dda625cd73752a7f0b64736f6c63430006090033",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "116:489:2:-:0;;;306:48;;;;;;;;;;39121:365:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10081:40;9748:10;10100:20;;10081:18;;;:40;;:::i;:::-;39201:4;39193:5;:12;;;;;;;;;;;;:::i;:::-;;39225:6;39215:7;:16;;;;;;;;;;;;:::i;:::-;;39319:40;38399:10;39338:20;;39319:18;;;:40;;:::i;:::-;39369:49;38731:10;39388:29;;39369:18;;;:49;;:::i;:::-;39428:51;39104:10;39447:31;;39428:18;;;:51;;:::i;:::-;39121:365;;116:489:2;;10812:198:0;10910:10;10895:25;;:11;:25;;;;;10887:66;;;;;;;;;;;;;;;;;;;;;;10999:4;10963:20;:33;10984:11;10963:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;10812:198;:::o;116:489:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6:328:-1:-;;166:67;230:2;225:3;166:67;;;159:74;;266:30;262:1;257:3;253:11;246:51;325:2;320:3;316:12;309:19;;152:182;;;;342:416;;542:2;531:9;527:18;519:26;;592:9;586:4;582:20;578:1;567:9;563:17;556:47;617:131;743:4;617:131;;;609:139;;513:245;;;;766:163;;881:6;876:3;869:19;918:4;913:3;909:14;894:29;;862:67;;;;;116:489:2;;;;;;;",
  "deployedSourceMap": "116:489:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10278:140:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;40392:90;;;:::i;:::-;;;;;;;;;;;;;;;;45052:209;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;44386:381;;;;;;;;;;;;;;;;:::i;:::-;;43266:200;;;:::i;:::-;;;;;;;;;;;;;;;;46763:300;;;;;;;;;;;;;;;;:::i;:::-;;42961:152;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;47712:149;;;;;;;;;;;;;;;;:::i;:::-;;43804:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;40120:167;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;42500:87;;;:::i;:::-;;;;;;;;;;;;;;;;39690:211;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;40591:94;;;:::i;:::-;;;;;;;;;;;;;;;;45560:290;;;;;;;;;;;;;;;;:::i;:::-;;241:21:2;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;48584:282:0;;;;;;;;;;;;;;;;:::i;:::-;;41528:740;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;357:245:2;;;;;;;;;;;;;;;;:::i;:::-;;46172:154:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;10278:140;10355:4;10378:20;:33;10399:11;10378:33;;;;;;;;;;;;;;;;;;;;;;;;;;;10371:40;;10278:140;;;:::o;40392:90::-;40438:13;40470:5;40463:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40392:90;:::o;45052:209::-;45120:7;45147:16;45155:7;45147;:16::i;:::-;45139:73;;;;;;;;;;;;;;;;;;;;;;45230:15;:24;45246:7;45230:24;;;;;;;;;;;;;;;;;;;;;45223:31;;45052:209;;;:::o;44386:381::-;44466:13;44482:16;44490:7;44482;:16::i;:::-;44466:32;;44522:5;44516:11;;:2;:11;;;;44508:57;;;;;;;;;;;;;;;;;;;;;;44600:5;44584:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;44609:37;44626:5;44633:12;:10;:12::i;:::-;44609:16;:37::i;:::-;44584:62;44576:152;;;;;;;;;;;;;;;;;;;;;;44739:21;44748:2;44752:7;44739:8;:21::i;:::-;44386:381;;;:::o;43266:200::-;43319:7;43438:21;:12;:19;:21::i;:::-;43431:28;;43266:200;:::o;46763:300::-;46922:41;46941:12;:10;:12::i;:::-;46955:7;46922:18;:41::i;:::-;46914:103;;;;;;;;;;;;;;;;;;;;;;47028:28;47038:4;47044:2;47048:7;47028:9;:28::i;:::-;46763:300;;;:::o;42961:152::-;43050:7;43076:30;43100:5;43076:13;:20;43090:5;43076:20;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;43069:37;;42961:152;;;;:::o;47712:149::-;47815:39;47832:4;47838:2;47842:7;47815:39;;;;;;;;;;;;:16;:39::i;:::-;47712:149;;;:::o;43804:161::-;43871:7;43891:15;43912:22;43928:5;43912:12;:15;;:22;;;;:::i;:::-;43890:44;;;43951:7;43944:14;;;43804:161;;;:::o;40120:167::-;40184:7;40210:70;40227:7;40210:70;;;;;;;;;;;;;;;;;:12;:16;;:70;;;;;:::i;:::-;40203:77;;40120:167;;;:::o;42500:87::-;42540:13;42572:8;42565:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42500:87;:::o;39690:211::-;39754:7;39798:1;39781:19;;:5;:19;;;;39773:74;;;;;;;;;;;;;;;;;;;;;;39865:29;:13;:20;39879:5;39865:20;;;;;;;;;;;;;;;:27;:29::i;:::-;39858:36;;39690:211;;;:::o;40591:94::-;40639:13;40671:7;40664:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40591:94;:::o;45560:290::-;45674:12;:10;:12::i;:::-;45662:24;;:8;:24;;;;45654:62;;;;;;;;;;;;;;;;;;;;;;45772:8;45727:18;:32;45746:12;:10;:12::i;:::-;45727:32;;;;;;;;;;;;;;;:42;45760:8;45727:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;45824:8;45795:48;;45810:12;:10;:12::i;:::-;45795:48;;;45834:8;45795:48;;;;;;;;;;;;;;;45560:290;;:::o;241:21:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;48584:282:0:-;48715:41;48734:12;:10;:12::i;:::-;48748:7;48715:18;:41::i;:::-;48707:103;;;;;;;;;;;;;;;;;;;;;;48820:39;48834:4;48840:2;48844:7;48853:5;48820:13;:39::i;:::-;48584:282;;;;:::o;41528:740::-;41593:13;41626:16;41634:7;41626;:16::i;:::-;41618:76;;;;;;;;;;;;;;;;;;;;;;41705:23;41731:10;:19;41742:7;41731:19;;;;;;;;;;;41705:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41849:1;41829:8;41823:22;;;;;;;;;;;;;;;;:27;41819:74;;;41873:9;41866:16;;;;;41819:74;42021:1;42001:9;41995:23;:27;41991:110;;;42069:8;42079:9;42052:37;;;;;;;;;;;;;;;;;;;;;;;42038:52;;;;;41991:110;42231:8;42241:18;:7;:16;:18::i;:::-;42214:46;;;;;;;;;;;;;;;;;;;;;;;42200:61;;;41528:740;;;;:::o;357:245:2:-;444:5;411:38;;:12;424:6;:15;;;411:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;403:74;;;;;;;;;;;;;;;;;;;;;;481:6;493;481:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;504:8;531:1;515:6;:13;;;;:17;504:28;;568:4;536:12;549:6;:15;;;536:29;;;;;;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;576:22;582:10;594:3;576:5;:22::i;:::-;357:245;;:::o;46172:154:0:-;46261:4;46284:18;:25;46303:5;46284:25;;;;;;;;;;;;;;;:35;46310:8;46284:35;;;;;;;;;;;;;;;;;;;;;;;;;46277:42;;46172:154;;;;:::o;50035:117::-;50092:4;50115:30;50137:7;50115:12;:21;;:30;;;;:::i;:::-;50108:37;;50035:117;;;:::o;816:104::-;869:15;903:10;896:17;;816:104;:::o;57059:155::-;57151:2;57124:15;:24;57140:7;57124:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;57199:7;57195:2;57168:39;;57177:16;57185:7;57177;:16::i;:::-;57168:39;;;;;;;;;;;;57059:155;;:::o;33765:121::-;33834:7;33860:19;33868:3;:10;;33860:7;:19::i;:::-;33853:26;;33765:121;;;:::o;50513:329::-;50598:4;50622:16;50630:7;50622;:16::i;:::-;50614:73;;;;;;;;;;;;;;;;;;;;;;50697:13;50713:16;50721:7;50713;:16::i;:::-;50697:32;;50758:5;50747:16;;:7;:16;;;:51;;;;50791:7;50767:31;;:20;50779:7;50767:11;:20::i;:::-;:31;;;50747:51;:87;;;;50802:32;50819:5;50826:7;50802:16;:32::i;:::-;50747:87;50739:96;;;50513:329;;;;:::o;54025:559::-;54142:4;54122:24;;:16;54130:7;54122;:16::i;:::-;:24;;;54114:78;;;;;;;;;;;;;;;;;;;;;;54224:1;54210:16;;:2;:16;;;;54202:65;;;;;;;;;;;;;;;;;;;;;;54278:39;54299:4;54305:2;54309:7;54278:20;:39::i;:::-;54379:29;54396:1;54400:7;54379:8;:29::i;:::-;54419:35;54446:7;54419:13;:19;54433:4;54419:19;;;;;;;;;;;;;;;:26;;:35;;;;:::i;:::-;;54464:30;54486:7;54464:13;:17;54478:2;54464:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;54505:29;54522:7;54531:2;54505:12;:16;;:29;;;;;:::i;:::-;;54569:7;54565:2;54550:27;;54559:4;54550:27;;;;;;;;;;;;54025:559;;;:::o;26578:135::-;26649:7;26683:22;26687:3;:10;;26699:5;26683:3;:22::i;:::-;26675:31;;26668:38;;26578:135;;;;:::o;34214:224::-;34294:7;34303;34323:11;34336:13;34353:22;34357:3;:10;;34369:5;34353:3;:22::i;:::-;34322:53;;;;34401:3;34393:12;;34423:5;34415:14;;34385:46;;;;;;;;;34214:224;;;;;:::o;34857:202::-;34964:7;35006:44;35011:3;:10;;35031:3;35023:12;;35037;35006:4;:44::i;:::-;34998:53;;34983:69;;34857:202;;;;;:::o;26134:112::-;26194:7;26220:19;26228:3;:10;;26220:7;:19::i;:::-;26213:26;;26134:112;;;:::o;49571:269::-;49684:28;49694:4;49700:2;49704:7;49684:9;:28::i;:::-;49730:48;49753:4;49759:2;49763:7;49772:5;49730:22;:48::i;:::-;49722:111;;;;;;;;;;;;;;;;;;;;;;49571:269;;;;:::o;35284:723::-;35340:13;35566:1;35557:5;:10;35553:51;;;35583:10;;;;;;;;;;;;;;;;;;;;;35553:51;35613:12;35628:5;35613:20;;35643:14;35667:75;35682:1;35674:4;:9;35667:75;;35699:8;;;;;;;35729:2;35721:10;;;;;;;;;35667:75;;;35751:19;35783:6;35773:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35751:39;;35800:13;35825:1;35816:6;:10;35800:26;;35843:5;35836:12;;35858:112;35873:1;35865:4;:9;35858:112;;35931:2;35924:4;:9;;;;;;35919:2;:14;35908:27;;35890:6;35897:7;;;;;;;35890:15;;;;;;;;;;;:45;;;;;;;;;;;35957:2;35949:10;;;;;;;;;35858:112;;;35993:6;35979:21;;;;;;35284:723;;;;:::o;52572:393::-;52665:1;52651:16;;:2;:16;;;;52643:61;;;;;;;;;;;;;;;;;;;;;;52723:16;52731:7;52723;:16::i;:::-;52722:17;52714:58;;;;;;;;;;;;;;;;;;;;;;52783:45;52812:1;52816:2;52820:7;52783:20;:45::i;:::-;52839:30;52861:7;52839:13;:17;52853:2;52839:17;;;;;;;;;;;;;;;:21;;:30;;;;:::i;:::-;;52880:29;52897:7;52906:2;52880:12;:16;;:29;;;;;:::i;:::-;;52950:7;52946:2;52925:33;;52942:1;52925:33;;;;;;;;;;;;52572:393;;:::o;33533:149::-;33617:4;33640:35;33650:3;:10;;33670:3;33662:12;;33640:9;:35::i;:::-;33633:42;;33533:149;;;;:::o;31225:108::-;31281:7;31307:3;:12;;:19;;;;31300:26;;31225:108;;;:::o;57770:93::-;;;;:::o;25693:135::-;25763:4;25786:35;25794:3;:10;;25814:5;25806:14;;25786:7;:35::i;:::-;25779:42;;25693:135;;;;:::o;25396:129::-;25463:4;25486:32;25491:3;:10;;25511:5;25503:14;;25486:4;:32::i;:::-;25479:39;;25396:129;;;;:::o;32981:174::-;33070:4;33093:55;33098:3;:10;;33118:3;33110:12;;33140:5;33132:14;;33124:23;;33093:4;:55::i;:::-;33086:62;;32981:174;;;;;:::o;23352:201::-;23419:7;23467:5;23446:3;:11;;:18;;;;:26;23438:73;;;;;;;;;;;;;;;;;;;;;;23528:3;:11;;23540:5;23528:18;;;;;;;;;;;;;;;;23521:25;;23352:201;;;;:::o;31676:274::-;31743:7;31752;31801:5;31779:3;:12;;:19;;;;:27;31771:74;;;;;;;;;;;;;;;;;;;;;;31856:22;31881:3;:12;;31894:5;31881:19;;;;;;;;;;;;;;;;;;31856:44;;31918:5;:10;;;31930:5;:12;;;31910:33;;;;;31676:274;;;;;:::o;32357:315::-;32451:7;32470:16;32489:3;:12;;:17;32502:3;32489:17;;;;;;;;;;;;32470:36;;32536:1;32524:8;:13;;32539:12;32516:36;;;;;;;;;;;;;;;;;;;;;;;;;32605:3;:12;;32629:1;32618:8;:12;32605:26;;;;;;;;;;;;;;;;;;:33;;;32598:40;;;32357:315;;;;;:::o;22913:107::-;22969:7;22995:3;:11;;:18;;;;22988:25;;22913:107;;;:::o;56003:1050::-;56123:4;56148:15;:2;:13;;;:15::i;:::-;56143:58;;56186:4;56179:11;;;;56143:58;56270:12;56284:23;56311:2;:7;;56355:45;;;56414:12;:10;:12::i;:::-;56440:4;56458:7;56479:5;56319:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56311:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;56269:226;;;;56510:7;56505:542;;56557:1;56537:10;:17;:21;56533:376;;;56702:10;56696:17;56762:15;56749:10;56745:2;56741:19;56734:44;56651:145;56834:60;;;;;;;;;;;;;;;;;;;56505:542;56939:13;56966:10;56955:32;;;;;;;;;;;;;;56939:48;;36737:10;57019:16;;57009:26;;;:6;:26;;;;57001:35;;;;;56003:1050;;;;;;;:::o;31012:123::-;31083:4;31127:1;31106:3;:12;;:17;31119:3;31106:17;;;;;;;;;;;;:22;;31099:29;;31012:123;;;;:::o;21112:1512::-;21178:4;21294:18;21315:3;:12;;:19;21328:5;21315:19;;;;;;;;;;;;21294:40;;21363:1;21349:10;:15;21345:1273;;21706:21;21743:1;21730:10;:14;21706:38;;21758:17;21799:1;21778:3;:11;;:18;;;;:22;21758:42;;22040:17;22060:3;:11;;22072:9;22060:22;;;;;;;;;;;;;;;;22040:42;;22203:9;22174:3;:11;;22186:13;22174:26;;;;;;;;;;;;;;;:38;;;;22320:1;22304:13;:17;22278:3;:12;;:23;22291:9;22278:23;;;;;;;;;;;:43;;;;22427:3;:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;22519:3;:12;;:19;22532:5;22519:19;;;;;;;;;;;22512:26;;;22560:4;22553:11;;;;;;;;21345:1273;22602:5;22595:12;;;21112:1512;;;;;:::o;20540:404::-;20603:4;20624:21;20634:3;20639:5;20624:9;:21::i;:::-;20619:319;;20661:3;:11;;20678:5;20661:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20841:3;:11;;:18;;;;20819:3;:12;;:19;20832:5;20819:19;;;;;;;;;;;:40;;;;20880:4;20873:11;;;;20619:319;20922:5;20915:12;;20540:404;;;;;:::o;28570:678::-;28646:4;28760:16;28779:3;:12;;:17;28792:3;28779:17;;;;;;;;;;;;28760:36;;28823:1;28811:8;:13;28807:435;;;28877:3;:12;;28895:38;;;;;;;;28912:3;28895:38;;;;28925:5;28895:38;;;28877:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29089:3;:12;;:19;;;;29069:3;:12;;:17;29082:3;29069:17;;;;;;;;;;;:39;;;;29129:4;29122:11;;;;;28807:435;29200:5;29164:3;:12;;29188:1;29177:8;:12;29164:26;;;;;;;;;;;;;;;;;;:33;;:41;;;;29226:5;29219:12;;;28570:678;;;;;;:::o;16982:610::-;17042:4;17300:16;17326:19;17348:66;17326:88;;;;17515:7;17503:20;17491:32;;17554:11;17542:8;:23;;:42;;;;;17581:3;17569:15;;:8;:15;;17542:42;17534:51;;;;16982:610;;;:::o;22705:127::-;22778:4;22824:1;22801:3;:12;;:19;22814:5;22801:19;;;;;;;;;;;;:24;;22794:31;;22705:127;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;142:124;;219:6;206:20;197:29;;231:30;255:5;231:30;;;191:75;;;;;273:128;;352:6;339:20;330:29;;364:32;390:5;364:32;;;324:77;;;;;408:132;;491:6;485:13;476:22;;503:32;529:5;503:32;;;470:70;;;;;548:440;;649:3;642:4;634:6;630:17;626:27;616:2;;667:1;664;657:12;616:2;704:6;691:20;726:64;741:48;782:6;741:48;;;726:64;;;717:73;;810:6;803:5;796:21;846:4;838:6;834:17;879:4;872:5;868:16;914:3;905:6;900:3;896:16;893:25;890:2;;;931:1;928;921:12;890:2;941:41;975:6;970:3;965;941:41;;;609:379;;;;;;;;997:442;;1099:3;1092:4;1084:6;1080:17;1076:27;1066:2;;1117:1;1114;1107:12;1066:2;1154:6;1141:20;1176:65;1191:49;1233:6;1191:49;;;1176:65;;;1167:74;;1261:6;1254:5;1247:21;1297:4;1289:6;1285:17;1330:4;1323:5;1319:16;1365:3;1356:6;1351:3;1347:16;1344:25;1341:2;;;1382:1;1379;1372:12;1341:2;1392:41;1426:6;1421:3;1416;1392:41;;;1059:380;;;;;;;;1477:713;;1589:4;1577:9;1572:3;1568:19;1564:30;1561:2;;;1607:1;1604;1597:12;1561:2;1625:20;1640:4;1625:20;;;1616:29;;1727:1;1716:9;1712:17;1699:31;1750:18;1742:6;1739:30;1736:2;;;1782:1;1779;1772:12;1736:2;1817:59;1872:3;1863:6;1852:9;1848:22;1817:59;;;1810:4;1803:5;1799:16;1792:85;1655:233;1938:2;1971:49;2016:3;2007:6;1996:9;1992:22;1971:49;;;1964:4;1957:5;1953:16;1946:75;1898:134;2089:2;2122:46;2164:3;2155:6;2144:9;2140:22;2122:46;;;2115:4;2108:5;2104:16;2097:72;2042:138;1555:635;;;;;2197:130;;2277:6;2264:20;2255:29;;2289:33;2316:5;2289:33;;;2249:78;;;;;2334:241;;2438:2;2426:9;2417:7;2413:23;2409:32;2406:2;;;2454:1;2451;2444:12;2406:2;2489:1;2506:53;2551:7;2542:6;2531:9;2527:22;2506:53;;;2496:63;;2468:97;2400:175;;;;;2582:366;;;2703:2;2691:9;2682:7;2678:23;2674:32;2671:2;;;2719:1;2716;2709:12;2671:2;2754:1;2771:53;2816:7;2807:6;2796:9;2792:22;2771:53;;;2761:63;;2733:97;2861:2;2879:53;2924:7;2915:6;2904:9;2900:22;2879:53;;;2869:63;;2840:98;2665:283;;;;;;2955:491;;;;3093:2;3081:9;3072:7;3068:23;3064:32;3061:2;;;3109:1;3106;3099:12;3061:2;3144:1;3161:53;3206:7;3197:6;3186:9;3182:22;3161:53;;;3151:63;;3123:97;3251:2;3269:53;3314:7;3305:6;3294:9;3290:22;3269:53;;;3259:63;;3230:98;3359:2;3377:53;3422:7;3413:6;3402:9;3398:22;3377:53;;;3367:63;;3338:98;3055:391;;;;;;3453:721;;;;;3617:3;3605:9;3596:7;3592:23;3588:33;3585:2;;;3634:1;3631;3624:12;3585:2;3669:1;3686:53;3731:7;3722:6;3711:9;3707:22;3686:53;;;3676:63;;3648:97;3776:2;3794:53;3839:7;3830:6;3819:9;3815:22;3794:53;;;3784:63;;3755:98;3884:2;3902:53;3947:7;3938:6;3927:9;3923:22;3902:53;;;3892:63;;3863:98;4020:2;4009:9;4005:18;3992:32;4044:18;4036:6;4033:30;4030:2;;;4076:1;4073;4066:12;4030:2;4096:62;4150:7;4141:6;4130:9;4126:22;4096:62;;;4086:72;;3971:193;3579:595;;;;;;;;4181:360;;;4299:2;4287:9;4278:7;4274:23;4270:32;4267:2;;;4315:1;4312;4305:12;4267:2;4350:1;4367:53;4412:7;4403:6;4392:9;4388:22;4367:53;;;4357:63;;4329:97;4457:2;4475:50;4517:7;4508:6;4497:9;4493:22;4475:50;;;4465:60;;4436:95;4261:280;;;;;;4548:366;;;4669:2;4657:9;4648:7;4644:23;4640:32;4637:2;;;4685:1;4682;4675:12;4637:2;4720:1;4737:53;4782:7;4773:6;4762:9;4758:22;4737:53;;;4727:63;;4699:97;4827:2;4845:53;4890:7;4881:6;4870:9;4866:22;4845:53;;;4835:63;;4806:98;4631:283;;;;;;4921:239;;5024:2;5012:9;5003:7;4999:23;4995:32;4992:2;;;5040:1;5037;5030:12;4992:2;5075:1;5092:52;5136:7;5127:6;5116:9;5112:22;5092:52;;;5082:62;;5054:96;4986:174;;;;;5167:261;;5281:2;5269:9;5260:7;5256:23;5252:32;5249:2;;;5297:1;5294;5287:12;5249:2;5332:1;5349:63;5404:7;5395:6;5384:9;5380:22;5349:63;;;5339:73;;5311:107;5243:185;;;;;5435:373;;5562:2;5550:9;5541:7;5537:23;5533:32;5530:2;;;5578:1;5575;5568:12;5530:2;5641:1;5630:9;5626:17;5613:31;5664:18;5656:6;5653:30;5650:2;;;5696:1;5693;5686:12;5650:2;5716:76;5784:7;5775:6;5764:9;5760:22;5716:76;;;5706:86;;5592:206;5524:284;;;;;5815:241;;5919:2;5907:9;5898:7;5894:23;5890:32;5887:2;;;5935:1;5932;5925:12;5887:2;5970:1;5987:53;6032:7;6023:6;6012:9;6008:22;5987:53;;;5977:63;;5949:97;5881:175;;;;;6063:137;6162:32;6188:5;6162:32;;;6157:3;6150:45;6144:56;;;6207:113;6290:24;6308:5;6290:24;;;6285:3;6278:37;6272:48;;;6327:104;6404:21;6419:5;6404:21;;;6399:3;6392:34;6386:45;;;6438:343;;6548:38;6580:5;6548:38;;;6598:70;6661:6;6656:3;6598:70;;;6591:77;;6673:52;6718:6;6713:3;6706:4;6699:5;6695:16;6673:52;;;6746:29;6768:6;6746:29;;;6741:3;6737:39;6730:46;;6528:253;;;;;;6788:356;;6916:38;6948:5;6916:38;;;6966:88;7047:6;7042:3;6966:88;;;6959:95;;7059:52;7104:6;7099:3;7092:4;7085:5;7081:16;7059:52;;;7132:6;7127:3;7123:16;7116:23;;6896:248;;;;;;7151:347;;7263:39;7296:5;7263:39;;;7314:71;7378:6;7373:3;7314:71;;;7307:78;;7390:52;7435:6;7430:3;7423:4;7416:5;7412:16;7390:52;;;7463:29;7485:6;7463:29;;;7458:3;7454:39;7447:46;;7243:255;;;;;;7505:360;;7635:39;7668:5;7635:39;;;7686:89;7768:6;7763:3;7686:89;;;7679:96;;7780:52;7825:6;7820:3;7813:4;7806:5;7802:16;7780:52;;;7853:6;7848:3;7844:16;7837:23;;7615:250;;;;;;7897:884;;8034:5;8028:12;8068:1;8057:9;8053:17;8081:1;8076:268;;;;8355:1;8350:425;;;;8046:729;;8076:268;8154:4;8150:1;8139:9;8135:17;8131:28;8173:89;8255:6;8250:3;8173:89;;;8166:96;;8300:4;8296:9;8285;8281:25;8276:3;8269:38;8330:6;8325:3;8321:16;8314:23;;8083:261;8076:268;;8350:425;8419:1;8408:9;8404:17;8435:89;8517:6;8512:3;8435:89;;;8428:96;;8546:38;8578:5;8546:38;;;8600:1;8608:130;8622:6;8619:1;8616:13;8608:130;;;8687:7;8681:14;8677:1;8672:3;8668:11;8661:35;8728:1;8719:7;8715:15;8704:26;;8644:4;8641:1;8637:12;8632:17;;8608:130;;;8761:6;8756:3;8752:16;8745:23;;8357:418;;;8046:729;;8004:777;;;;;;8790:371;;8950:67;9014:2;9009:3;8950:67;;;8943:74;;9050:34;9046:1;9041:3;9037:11;9030:55;9119:4;9114:2;9109:3;9105:12;9098:26;9152:2;9147:3;9143:12;9136:19;;8936:225;;;;9170:323;;9330:67;9394:2;9389:3;9330:67;;;9323:74;;9430:25;9426:1;9421:3;9417:11;9410:46;9484:2;9479:3;9475:12;9468:19;;9316:177;;;;9502:387;;9662:67;9726:2;9721:3;9662:67;;;9655:74;;9762:34;9758:1;9753:3;9749:11;9742:55;9831:20;9826:2;9821:3;9817:12;9810:42;9880:2;9875:3;9871:12;9864:19;;9648:241;;;;9898:328;;10058:67;10122:2;10117:3;10058:67;;;10051:74;;10158:30;10154:1;10149:3;10145:11;10138:51;10217:2;10212:3;10208:12;10201:19;;10044:182;;;;10235:373;;10395:67;10459:2;10454:3;10395:67;;;10388:74;;10495:34;10491:1;10486:3;10482:11;10475:55;10564:6;10559:2;10554:3;10550:12;10543:28;10599:2;10594:3;10590:12;10583:19;;10381:227;;;;10617:325;;10777:67;10841:2;10836:3;10777:67;;;10770:74;;10877:27;10873:1;10868:3;10864:11;10857:48;10933:2;10928:3;10924:12;10917:19;;10763:179;;;;10951:381;;11111:67;11175:2;11170:3;11111:67;;;11104:74;;11211:34;11207:1;11202:3;11198:11;11191:55;11280:14;11275:2;11270:3;11266:12;11259:36;11323:2;11318:3;11314:12;11307:19;;11097:235;;;;11341:393;;11501:67;11565:2;11560:3;11501:67;;;11494:74;;11601:34;11597:1;11592:3;11588:11;11581:55;11670:26;11665:2;11660:3;11656:12;11649:48;11725:2;11720:3;11716:12;11709:19;;11487:247;;;;11743:379;;11903:67;11967:2;11962:3;11903:67;;;11896:74;;12003:34;11999:1;11994:3;11990:11;11983:55;12072:12;12067:2;12062:3;12058:12;12051:34;12113:2;12108:3;12104:12;12097:19;;11889:233;;;;12131:371;;12291:67;12355:2;12350:3;12291:67;;;12284:74;;12391:34;12387:1;12382:3;12378:11;12371:55;12460:4;12455:2;12450:3;12446:12;12439:26;12493:2;12488:3;12484:12;12477:19;;12277:225;;;;12511:332;;12671:67;12735:2;12730:3;12671:67;;;12664:74;;12771:34;12767:1;12762:3;12758:11;12751:55;12834:2;12829:3;12825:12;12818:19;;12657:186;;;;12852:381;;13012:67;13076:2;13071:3;13012:67;;;13005:74;;13112:34;13108:1;13103:3;13099:11;13092:55;13181:14;13176:2;13171:3;13167:12;13160:36;13224:2;13219:3;13215:12;13208:19;;12998:235;;;;13242:378;;13402:67;13466:2;13461:3;13402:67;;;13395:74;;13502:34;13498:1;13493:3;13489:11;13482:55;13571:11;13566:2;13561:3;13557:12;13550:33;13611:2;13606:3;13602:12;13595:19;;13388:232;;;;13629:384;;13789:67;13853:2;13848:3;13789:67;;;13782:74;;13889:34;13885:1;13880:3;13876:11;13869:55;13958:17;13953:2;13948:3;13944:12;13937:39;14004:2;13999:3;13995:12;13988:19;;13775:238;;;;14022:370;;14182:67;14246:2;14241:3;14182:67;;;14175:74;;14282:34;14278:1;14273:3;14269:11;14262:55;14351:3;14346:2;14341:3;14337:12;14330:25;14383:2;14378:3;14374:12;14367:19;;14168:224;;;;14401:386;;14561:67;14625:2;14620:3;14561:67;;;14554:74;;14661:34;14657:1;14652:3;14648:11;14641:55;14730:19;14725:2;14720:3;14716:12;14709:41;14778:2;14773:3;14769:12;14762:19;;14547:240;;;;14795:113;14878:24;14896:5;14878:24;;;14873:3;14866:37;14860:48;;;14915:271;;15068:93;15157:3;15148:6;15068:93;;;15061:100;;15178:3;15171:10;;15049:137;;;;;15193:275;;15348:95;15439:3;15430:6;15348:95;;;15341:102;;15460:3;15453:10;;15329:139;;;;;15475:430;;15675:92;15763:3;15754:6;15675:92;;;15668:99;;15785:95;15876:3;15867:6;15785:95;;;15778:102;;15897:3;15890:10;;15656:249;;;;;;15912:222;;16039:2;16028:9;16024:18;16016:26;;16053:71;16121:1;16110:9;16106:17;16097:6;16053:71;;;16010:124;;;;;16141:672;;16386:3;16375:9;16371:19;16363:27;;16401:87;16485:1;16474:9;16470:17;16461:6;16401:87;;;16499:72;16567:2;16556:9;16552:18;16543:6;16499:72;;;16582;16650:2;16639:9;16635:18;16626:6;16582:72;;;16702:9;16696:4;16692:20;16687:2;16676:9;16672:18;16665:48;16727:76;16798:4;16789:6;16727:76;;;16719:84;;16357:456;;;;;;;;16820:210;;16941:2;16930:9;16926:18;16918:26;;16955:65;17017:1;17006:9;17002:17;16993:6;16955:65;;;16912:118;;;;;17037:310;;17184:2;17173:9;17169:18;17161:26;;17234:9;17228:4;17224:20;17220:1;17209:9;17205:17;17198:47;17259:78;17332:4;17323:6;17259:78;;;17251:86;;17155:192;;;;;17354:520;;17551:2;17540:9;17536:18;17528:26;;17601:9;17595:4;17591:20;17587:1;17576:9;17572:17;17565:47;17626:78;17699:4;17690:6;17626:78;;;17618:86;;17715:72;17783:2;17772:9;17768:18;17759:6;17715:72;;;17798:66;17860:2;17849:9;17845:18;17836:6;17798:66;;;17522:352;;;;;;;17881:416;;18081:2;18070:9;18066:18;18058:26;;18131:9;18125:4;18121:20;18117:1;18106:9;18102:17;18095:47;18156:131;18282:4;18156:131;;;18148:139;;18052:245;;;;18304:416;;18504:2;18493:9;18489:18;18481:26;;18554:9;18548:4;18544:20;18540:1;18529:9;18525:17;18518:47;18579:131;18705:4;18579:131;;;18571:139;;18475:245;;;;18727:416;;18927:2;18916:9;18912:18;18904:26;;18977:9;18971:4;18967:20;18963:1;18952:9;18948:17;18941:47;19002:131;19128:4;19002:131;;;18994:139;;18898:245;;;;19150:416;;19350:2;19339:9;19335:18;19327:26;;19400:9;19394:4;19390:20;19386:1;19375:9;19371:17;19364:47;19425:131;19551:4;19425:131;;;19417:139;;19321:245;;;;19573:416;;19773:2;19762:9;19758:18;19750:26;;19823:9;19817:4;19813:20;19809:1;19798:9;19794:17;19787:47;19848:131;19974:4;19848:131;;;19840:139;;19744:245;;;;19996:416;;20196:2;20185:9;20181:18;20173:26;;20246:9;20240:4;20236:20;20232:1;20221:9;20217:17;20210:47;20271:131;20397:4;20271:131;;;20263:139;;20167:245;;;;20419:416;;20619:2;20608:9;20604:18;20596:26;;20669:9;20663:4;20659:20;20655:1;20644:9;20640:17;20633:47;20694:131;20820:4;20694:131;;;20686:139;;20590:245;;;;20842:416;;21042:2;21031:9;21027:18;21019:26;;21092:9;21086:4;21082:20;21078:1;21067:9;21063:17;21056:47;21117:131;21243:4;21117:131;;;21109:139;;21013:245;;;;21265:416;;21465:2;21454:9;21450:18;21442:26;;21515:9;21509:4;21505:20;21501:1;21490:9;21486:17;21479:47;21540:131;21666:4;21540:131;;;21532:139;;21436:245;;;;21688:416;;21888:2;21877:9;21873:18;21865:26;;21938:9;21932:4;21928:20;21924:1;21913:9;21909:17;21902:47;21963:131;22089:4;21963:131;;;21955:139;;21859:245;;;;22111:416;;22311:2;22300:9;22296:18;22288:26;;22361:9;22355:4;22351:20;22347:1;22336:9;22332:17;22325:47;22386:131;22512:4;22386:131;;;22378:139;;22282:245;;;;22534:416;;22734:2;22723:9;22719:18;22711:26;;22784:9;22778:4;22774:20;22770:1;22759:9;22755:17;22748:47;22809:131;22935:4;22809:131;;;22801:139;;22705:245;;;;22957:416;;23157:2;23146:9;23142:18;23134:26;;23207:9;23201:4;23197:20;23193:1;23182:9;23178:17;23171:47;23232:131;23358:4;23232:131;;;23224:139;;23128:245;;;;23380:416;;23580:2;23569:9;23565:18;23557:26;;23630:9;23624:4;23620:20;23616:1;23605:9;23601:17;23594:47;23655:131;23781:4;23655:131;;;23647:139;;23551:245;;;;23803:416;;24003:2;23992:9;23988:18;23980:26;;24053:9;24047:4;24043:20;24039:1;24028:9;24024:17;24017:47;24078:131;24204:4;24078:131;;;24070:139;;23974:245;;;;24226:416;;24426:2;24415:9;24411:18;24403:26;;24476:9;24470:4;24466:20;24462:1;24451:9;24447:17;24440:47;24501:131;24627:4;24501:131;;;24493:139;;24397:245;;;;24649:222;;24776:2;24765:9;24761:18;24753:26;;24790:71;24858:1;24847:9;24843:17;24834:6;24790:71;;;24747:124;;;;;24878:256;;24940:2;24934:9;24924:19;;24978:4;24970:6;24966:17;25077:6;25065:10;25062:22;25041:18;25029:10;25026:34;25023:62;25020:2;;;25098:1;25095;25088:12;25020:2;25118:10;25114:2;25107:22;24918:216;;;;;25141:321;;25284:18;25276:6;25273:30;25270:2;;;25316:1;25313;25306:12;25270:2;25383:4;25379:9;25372:4;25364:6;25360:17;25356:33;25348:41;;25447:4;25441;25437:15;25429:23;;25207:255;;;;25469:322;;25613:18;25605:6;25602:30;25599:2;;;25645:1;25642;25635:12;25599:2;25712:4;25708:9;25701:4;25693:6;25689:17;25685:33;25677:41;;25776:4;25770;25766:15;25758:23;;25536:255;;;;25798:158;;25866:3;25858:11;;25903:3;25900:1;25893:14;25935:4;25932:1;25922:18;25914:26;;25852:104;;;;25963:121;;26056:5;26050:12;26040:22;;26021:63;;;;26091:122;;26185:5;26179:12;26169:22;;26150:63;;;;26221:162;;26335:6;26330:3;26323:19;26372:4;26367:3;26363:14;26348:29;;26316:67;;;;;26392:144;;26527:3;26512:18;;26505:31;;;;;26545:163;;26660:6;26655:3;26648:19;26697:4;26692:3;26688:14;26673:29;;26641:67;;;;;26717:145;;26853:3;26838:18;;26831:31;;;;;26870:91;;26932:24;26950:5;26932:24;;;26921:35;;26915:46;;;;26968:99;;27038:24;27056:5;27038:24;;;27027:35;;27021:46;;;;27074:85;;27147:5;27140:13;27133:21;27122:32;;27116:43;;;;27166:144;;27238:66;27231:5;27227:78;27216:89;;27210:100;;;;27317:121;;27390:42;27383:5;27379:54;27368:65;;27362:76;;;;27445:72;;27507:5;27496:16;;27490:27;;;;27525:145;27606:6;27601:3;27596;27583:30;27662:1;27653:6;27648:3;27644:16;27637:27;27576:94;;;;27679:268;27744:1;27751:101;27765:6;27762:1;27759:13;27751:101;;;27841:1;27836:3;27832:11;27826:18;27822:1;27817:3;27813:11;27806:39;27787:2;27784:1;27780:10;27775:15;;27751:101;;;27867:6;27864:1;27861:13;27858:2;;;27932:1;27923:6;27918:3;27914:16;27907:27;27858:2;27728:219;;;;;27955:97;;28043:2;28039:7;28034:2;28027:5;28023:14;28019:28;28009:38;;28003:49;;;;28060:117;28129:24;28147:5;28129:24;;;28122:5;28119:35;28109:2;;28168:1;28165;28158:12;28109:2;28103:74;;28184:111;28250:21;28265:5;28250:21;;;28243:5;28240:32;28230:2;;28286:1;28283;28276:12;28230:2;28224:71;;28302:115;28370:23;28387:5;28370:23;;;28363:5;28360:34;28350:2;;28408:1;28405;28398:12;28350:2;28344:73;;28424:117;28493:24;28511:5;28493:24;;;28486:5;28483:35;28473:2;;28532:1;28529;28522:12;28473:2;28467:74;",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\nimport \"./ERC721.sol\";\n\ncontract photoToken is ERC721 {\n\n\tstruct Photo\n\t{\n        string photo_id;\n        uint size;\n        bool originality;\n\t}\n\n\tPhoto[] public photos;\n\n\tmapping(string => bool) _photoExists;\n\n\tconstructor () ERC721(\"Photo\",\"PIC\") public {\n\t}\n\n\tfunction mint(Photo memory _photo) public {\n\t\trequire(_photoExists[_photo.photo_id] == false, \"photo_id already exists\");\n\t\tphotos.push(_photo);\n\t\tuint _id = photos.length - 1;\n\t\t_photoExists[_photo.photo_id] = true;\n\t\t_mint(msg.sender, _id);\n\t}\n\n}",
  "sourcePath": "Z:\\BD\\Smart Contract Essentials\\assignment\\trial3\\photoToken\\contracts\\photoToken.sol",
  "ast": {
    "absolutePath": "/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/photoToken.sol",
    "exportedSymbols": {
      "photoToken": [
        2513
      ]
    },
    "id": 2514,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2444,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:2"
      },
      {
        "id": 2445,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:2"
      },
      {
        "absolutePath": "/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2446,
        "nodeType": "ImportDirective",
        "scope": 2514,
        "sourceUnit": 2406,
        "src": "92:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2447,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2405,
              "src": "139:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2405",
                "typeString": "contract ERC721"
              }
            },
            "id": 2448,
            "nodeType": "InheritanceSpecifier",
            "src": "139:6:2"
          }
        ],
        "contractDependencies": [
          26,
          37,
          151,
          176,
          205,
          277,
          2405
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2513,
        "linearizedBaseContracts": [
          2513,
          2405,
          205,
          176,
          151,
          277,
          37,
          26
        ],
        "name": "photoToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "photoToken.Photo",
            "id": 2455,
            "members": [
              {
                "constant": false,
                "id": 2450,
                "mutability": "mutable",
                "name": "photo_id",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "174:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 2449,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "174:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2452,
                "mutability": "mutable",
                "name": "size",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "199:9:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2451,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "199:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2454,
                "mutability": "mutable",
                "name": "originality",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "218:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2453,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "218:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Photo",
            "nodeType": "StructDefinition",
            "scope": 2513,
            "src": "150:88:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "af2a5d6f",
            "id": 2458,
            "mutability": "mutable",
            "name": "photos",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2513,
            "src": "241:21:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
              "typeString": "struct photoToken.Photo[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 2456,
                "name": "Photo",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 2455,
                "src": "241:5:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Photo_$2455_storage_ptr",
                  "typeString": "struct photoToken.Photo"
                }
              },
              "id": 2457,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "241:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage_ptr",
                "typeString": "struct photoToken.Photo[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 2462,
            "mutability": "mutable",
            "name": "_photoExists",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2513,
            "src": "266:36:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
              "typeString": "mapping(string => bool)"
            },
            "typeName": {
              "id": 2461,
              "keyType": {
                "id": 2459,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "274:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "266:23:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                "typeString": "mapping(string => bool)"
              },
              "valueType": {
                "id": 2460,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "284:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2469,
              "nodeType": "Block",
              "src": "350:4:2",
              "statements": []
            },
            "documentation": null,
            "id": 2470,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "50686f746f",
                    "id": 2465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "328:7:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_0cd4a4bc081385231480fe39157001287f8cda715836354d304edf2543a7010b",
                      "typeString": "literal_string \"Photo\""
                    },
                    "value": "Photo"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "504943",
                    "id": 2466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "336:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6b749f7c8e1e83206ed83ad2813cfac0d13231da4ab361317f917e1e907b947e",
                      "typeString": "literal_string \"PIC\""
                    },
                    "value": "PIC"
                  }
                ],
                "id": 2467,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2464,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2405,
                  "src": "321:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2405_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "321:21:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "318:2:2"
            },
            "returnParameters": {
              "id": 2468,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "350:0:2"
            },
            "scope": 2513,
            "src": "306:48:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2511,
              "nodeType": "Block",
              "src": "399:203:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 2476,
                            "name": "_photoExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2462,
                            "src": "411:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                              "typeString": "mapping(string memory => bool)"
                            }
                          },
                          "id": 2479,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2477,
                              "name": "_photo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "424:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                                "typeString": "struct photoToken.Photo memory"
                              }
                            },
                            "id": 2478,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "photo_id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2450,
                            "src": "424:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "411:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 2480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "444:5:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "411:38:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "70686f746f5f696420616c726561647920657869737473",
                        "id": 2482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "451:25:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1a953a84e859cb467ae7849ea9e3f08c82bbe0cd25b244102faad7f3e8c92919",
                          "typeString": "literal_string \"photo_id already exists\""
                        },
                        "value": "photo_id already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1a953a84e859cb467ae7849ea9e3f08c82bbe0cd25b244102faad7f3e8c92919",
                          "typeString": "literal_string \"photo_id already exists\""
                        }
                      ],
                      "id": 2475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "403:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:74:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2484,
                  "nodeType": "ExpressionStatement",
                  "src": "403:74:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2488,
                        "name": "_photo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2472,
                        "src": "493:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                          "typeString": "struct photoToken.Photo memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                          "typeString": "struct photoToken.Photo memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2485,
                        "name": "photos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2458,
                        "src": "481:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
                          "typeString": "struct photoToken.Photo storage ref[] storage ref"
                        }
                      },
                      "id": 2487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "481:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Photo_$2455_storage_$returns$__$",
                        "typeString": "function (struct photoToken.Photo storage ref)"
                      }
                    },
                    "id": 2489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "481:19:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2490,
                  "nodeType": "ExpressionStatement",
                  "src": "481:19:2"
                },
                {
                  "assignments": [
                    2492
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2492,
                      "mutability": "mutable",
                      "name": "_id",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 2511,
                      "src": "504:8:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2491,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "504:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 2497,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2496,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2493,
                        "name": "photos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2458,
                        "src": "515:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
                          "typeString": "struct photoToken.Photo storage ref[] storage ref"
                        }
                      },
                      "id": 2494,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "515:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 2495,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "531:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "515:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "504:28:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 2498,
                        "name": "_photoExists",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2462,
                        "src": "536:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                          "typeString": "mapping(string memory => bool)"
                        }
                      },
                      "id": 2501,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2499,
                          "name": "_photo",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2472,
                          "src": "549:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                            "typeString": "struct photoToken.Photo memory"
                          }
                        },
                        "id": 2500,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "photo_id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2450,
                        "src": "549:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "536:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2502,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "568:4:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "536:36:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2504,
                  "nodeType": "ExpressionStatement",
                  "src": "536:36:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2506,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "582:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "582:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2508,
                        "name": "_id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "594:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2505,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2123,
                      "src": "576:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "576:22:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2510,
                  "nodeType": "ExpressionStatement",
                  "src": "576:22:2"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "e8cc1085",
            "id": 2512,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2472,
                  "mutability": "mutable",
                  "name": "_photo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2512,
                  "src": "371:19:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                    "typeString": "struct photoToken.Photo"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 2471,
                    "name": "Photo",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2455,
                    "src": "371:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Photo_$2455_storage_ptr",
                      "typeString": "struct photoToken.Photo"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "370:21:2"
            },
            "returnParameters": {
              "id": 2474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "399:0:2"
            },
            "scope": 2513,
            "src": "357:245:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 2514,
        "src": "116:489:2"
      }
    ],
    "src": "33:572:2"
  },
  "legacyAST": {
    "absolutePath": "/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/photoToken.sol",
    "exportedSymbols": {
      "photoToken": [
        2513
      ]
    },
    "id": 2514,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2444,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:2"
      },
      {
        "id": 2445,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:2"
      },
      {
        "absolutePath": "/Z/BD/Smart Contract Essentials/assignment/trial3/photoToken/contracts/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2446,
        "nodeType": "ImportDirective",
        "scope": 2514,
        "sourceUnit": 2406,
        "src": "92:22:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2447,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2405,
              "src": "139:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2405",
                "typeString": "contract ERC721"
              }
            },
            "id": 2448,
            "nodeType": "InheritanceSpecifier",
            "src": "139:6:2"
          }
        ],
        "contractDependencies": [
          26,
          37,
          151,
          176,
          205,
          277,
          2405
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2513,
        "linearizedBaseContracts": [
          2513,
          2405,
          205,
          176,
          151,
          277,
          37,
          26
        ],
        "name": "photoToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "photoToken.Photo",
            "id": 2455,
            "members": [
              {
                "constant": false,
                "id": 2450,
                "mutability": "mutable",
                "name": "photo_id",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "174:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 2449,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "174:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2452,
                "mutability": "mutable",
                "name": "size",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "199:9:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2451,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "199:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 2454,
                "mutability": "mutable",
                "name": "originality",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 2455,
                "src": "218:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2453,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "218:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Photo",
            "nodeType": "StructDefinition",
            "scope": 2513,
            "src": "150:88:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "af2a5d6f",
            "id": 2458,
            "mutability": "mutable",
            "name": "photos",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2513,
            "src": "241:21:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
              "typeString": "struct photoToken.Photo[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 2456,
                "name": "Photo",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 2455,
                "src": "241:5:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Photo_$2455_storage_ptr",
                  "typeString": "struct photoToken.Photo"
                }
              },
              "id": 2457,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "241:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage_ptr",
                "typeString": "struct photoToken.Photo[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 2462,
            "mutability": "mutable",
            "name": "_photoExists",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2513,
            "src": "266:36:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
              "typeString": "mapping(string => bool)"
            },
            "typeName": {
              "id": 2461,
              "keyType": {
                "id": 2459,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "274:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "266:23:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                "typeString": "mapping(string => bool)"
              },
              "valueType": {
                "id": 2460,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "284:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2469,
              "nodeType": "Block",
              "src": "350:4:2",
              "statements": []
            },
            "documentation": null,
            "id": 2470,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "50686f746f",
                    "id": 2465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "328:7:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_0cd4a4bc081385231480fe39157001287f8cda715836354d304edf2543a7010b",
                      "typeString": "literal_string \"Photo\""
                    },
                    "value": "Photo"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "504943",
                    "id": 2466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "336:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6b749f7c8e1e83206ed83ad2813cfac0d13231da4ab361317f917e1e907b947e",
                      "typeString": "literal_string \"PIC\""
                    },
                    "value": "PIC"
                  }
                ],
                "id": 2467,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 2464,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2405,
                  "src": "321:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$2405_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "321:21:2"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2463,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "318:2:2"
            },
            "returnParameters": {
              "id": 2468,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "350:0:2"
            },
            "scope": 2513,
            "src": "306:48:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2511,
              "nodeType": "Block",
              "src": "399:203:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 2476,
                            "name": "_photoExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2462,
                            "src": "411:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                              "typeString": "mapping(string memory => bool)"
                            }
                          },
                          "id": 2479,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2477,
                              "name": "_photo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "424:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                                "typeString": "struct photoToken.Photo memory"
                              }
                            },
                            "id": 2478,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "photo_id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2450,
                            "src": "424:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "411:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 2480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "444:5:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "411:38:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "70686f746f5f696420616c726561647920657869737473",
                        "id": 2482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "451:25:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1a953a84e859cb467ae7849ea9e3f08c82bbe0cd25b244102faad7f3e8c92919",
                          "typeString": "literal_string \"photo_id already exists\""
                        },
                        "value": "photo_id already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1a953a84e859cb467ae7849ea9e3f08c82bbe0cd25b244102faad7f3e8c92919",
                          "typeString": "literal_string \"photo_id already exists\""
                        }
                      ],
                      "id": 2475,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "403:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:74:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2484,
                  "nodeType": "ExpressionStatement",
                  "src": "403:74:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2488,
                        "name": "_photo",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2472,
                        "src": "493:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                          "typeString": "struct photoToken.Photo memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                          "typeString": "struct photoToken.Photo memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2485,
                        "name": "photos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2458,
                        "src": "481:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
                          "typeString": "struct photoToken.Photo storage ref[] storage ref"
                        }
                      },
                      "id": 2487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "481:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Photo_$2455_storage_$returns$__$",
                        "typeString": "function (struct photoToken.Photo storage ref)"
                      }
                    },
                    "id": 2489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "481:19:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2490,
                  "nodeType": "ExpressionStatement",
                  "src": "481:19:2"
                },
                {
                  "assignments": [
                    2492
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2492,
                      "mutability": "mutable",
                      "name": "_id",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 2511,
                      "src": "504:8:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2491,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "504:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 2497,
                  "initialValue": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2496,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2493,
                        "name": "photos",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2458,
                        "src": "515:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Photo_$2455_storage_$dyn_storage",
                          "typeString": "struct photoToken.Photo storage ref[] storage ref"
                        }
                      },
                      "id": 2494,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "515:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 2495,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "531:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "515:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "504:28:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 2498,
                        "name": "_photoExists",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2462,
                        "src": "536:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                          "typeString": "mapping(string memory => bool)"
                        }
                      },
                      "id": 2501,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2499,
                          "name": "_photo",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2472,
                          "src": "549:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                            "typeString": "struct photoToken.Photo memory"
                          }
                        },
                        "id": 2500,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "photo_id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2450,
                        "src": "549:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "536:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2502,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "568:4:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "536:36:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2504,
                  "nodeType": "ExpressionStatement",
                  "src": "536:36:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2506,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "582:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "582:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2508,
                        "name": "_id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "594:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2505,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2123,
                      "src": "576:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "576:22:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2510,
                  "nodeType": "ExpressionStatement",
                  "src": "576:22:2"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "e8cc1085",
            "id": 2512,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2472,
                  "mutability": "mutable",
                  "name": "_photo",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2512,
                  "src": "371:19:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Photo_$2455_memory_ptr",
                    "typeString": "struct photoToken.Photo"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 2471,
                    "name": "Photo",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2455,
                    "src": "371:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Photo_$2455_storage_ptr",
                      "typeString": "struct photoToken.Photo"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "370:21:2"
            },
            "returnParameters": {
              "id": 2474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "399:0:2"
            },
            "scope": 2513,
            "src": "357:245:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 2514,
        "src": "116:489:2"
      }
    ],
    "src": "33:572:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.9+commit.3e3065ac.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xF5Ca93dC409412EAC73529CAfFdb8c30BCe4AC57",
      "transactionHash": "0xdd90466f9be70e2cc1acec38f7a336b8b6997f6cfad0a0bdc7e9563b58325ab5"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-06-08T03:02:39.259Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "name()": {
        "details": "Gets the token name.",
        "returns": {
          "_0": "string representing the token name"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Gets the token symbol.",
        "returns": {
          "_0": "string representing the token symbol"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner.",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "returns": {
          "_0": "uint256 token ID at the given index of the tokens list owned by the requested address"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a given token ID. May return an empty string. If a base URI is set (via {_setBaseURI}), it is added as a prefix to the token's own URI (via {_setTokenURI}). If there is a base URI but no token URI, the token's ID will be used as its URI when appending it to the base URI. This pattern for autogenerated token URIs can lead to large gas savings. .Examples |=== |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()` | \"\" | \"\" | \"\" | \"\" | \"token.uri/123\" | \"token.uri/123\" | \"token.uri/\" | \"123\" | \"token.uri/123\" | \"token.uri/\" | \"\" | \"token.uri/<tokenId>\" |=== Requirements: - `tokenId` must exist."
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract.",
        "returns": {
          "_0": "uint256 representing the total amount of tokens"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}